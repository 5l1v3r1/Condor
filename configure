#!/usr/bin/python

import optparse, os, string

parser = optparse.OptionParser()

parser.add_option('-f', '--internal-files',
    action="store_true", dest="internalFiles",
    help="Internal files", default=False)
parser.add_option('-r', '--update-readme',
    action="store_true", dest="noUpdateReadme",
    help="Update the readme file", default=False)

options, args = parser.parse_args()

def getBytes(name):
    if os.path.isfile(name):
        fh = open(name, 'rb')
        ba = bytearray()
        try:
            ba = bytearray(fh.read())
        finally:
            fh.close

        fh.close()
        return ba;

def clean(name):
    if os.path.isfile(name):
        os.remove(name)

def getTodo(lines, file, i):
    result = []
    split = lines.split('\n')
    for line in split:
        if 'TODO: ' in line:
            s = line.split('TODO: ')
            result.append(file + ' ' + str(i) + ' - ' + s[1])
    return result

def updateReadme():
    rootdir = 'src/'
    todos = []
    output = ''
    with open('readme.md','r+') as fout:
        for root, subFolders, files in os.walk(rootdir):
            for file in files:
                if '.cc' in file or '.h' in file:
                    with open(os.path.join(root, file), 'r') as fin:
                        i = 0
                        for lines in fin:
                            i = i + 1
                            todos.extend(getTodo(lines, file, i))
        found = False
        for lines in fout:
            if 'Todo:' in lines:
                found = True
            elif not found:
                output += lines
            if found:
                break
        output += 'Todo:\n------'
        for todo in todos:
            output += '\n - ' + todo
        fout.close()
    os.remove('readme.md')
    f = open('readme.md', 'w+')
    f.write(output)
    

def toFile(fName, s):
    if string:
        f = open(fName,'wb')
        newFileByteArray = bytearray(s)
        f.write(newFileByteArray) # python will convert \n to os.linesep
        f.close() # you can omit in most cases as the destructor will call it

def toHex(s):
    lst = []
    for ch in s:
        hv = hex(ord(ch)).replace('0x', '')
        if len(hv) == 1:
            hv = '0'+hv
        lst.append(hv)
    
    return reduce(lambda x,y:x+y, lst)

def toOutputFile(hex, className):
    fileContents = '''
namespace Condor{
namespace internal{
        static const char* '''
    fileContents += className
    fileContents += '''Bytes = "'''
    fileContents += hex
    fileContents += '''";
} // namespace internal
} // namespace Condor
    '''
    return fileContents.strip()

def getCbFiles():
    rootdir = 'src/'
    for root, subFolders, files in os.walk(rootdir):
            for file in files:
                if '.cb' in file:
                    name = file.split('.cb')[0]
                    name = name.capitalize()
                    start(os.path.join(root, file), name)



def start(name, className):
    bytesname = string.replace(name, '.cb', '-bytes.h')
    clean(string.replace(name, '.cb', '.o'))
    clean(bytesname)
    s = getBytes(name)
    hexa = toHex(s.decode("utf-8"))
    out = toOutputFile(hexa, className)
    toFile(bytesname, out)

def checkFolders():
    dirs = ['win32', 'linux', 'darwin']
    for directory in dirs:
        directory = 'build/' + directory
        if not os.path.exists(directory):
            os.makedirs(directory)

if __name__ == "__main__":
    # if options.internalFiles:
    #     getCbFiles()
    if options.noUpdateReadme:
        updateReadme()
    checkFolders()

