#!/usr/bin/python

import optparse, os, string
from subprocess import call

parser = optparse.OptionParser()

parser.add_option('-d', '--debug',
    action='store_true', dest='debug',
    help='Build Debug Version', default=False)

parser.add_option('-e', '--execute', 
	action='store_true', dest='execute',
	help='Execute after build', default=False)

parser.add_option('-c', '--clean',
	action='store_true', dest='clean',
	help='Clean before build')

parser.add_option('-n', '--namespace',
    dest='namespace',
    help='Which debug file should be included', default='All')

parser.add_option('-m', '--memory',
    action='store_true', dest='memory',
    help='Run valgrind', default=False)

options, args = parser.parse_args()

def runBuild():

    cmakeOptions = ['cmake']

    cmakeOptions.append('.')

    if options.debug:
        cmakeOptions.append('-DCMAKE_BUILD_TYPE=Debug')
    else:
        cmakeOptions.append('-DCMAKE_BUILD_TYPE=Release')

    cmakeOptions.append('-DDEBUG_NAMESPACE=' + options.namespace)

    call(cmakeOptions)

    if options.clean:
    	call(['make', 'clean'])

    call(['make'])

    if options.execute:
    	call(['./build/condor'])

    if options.memory:
        call(['valgrind', '--leak-check=full', '--show-leak-kinds=all', '--track-origins=yes', '--log-file=mem.dump', './build/condor'])

if __name__ == "__main__":
    runBuild()